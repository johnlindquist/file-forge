---
description: 
globs: 
alwaysApply: true
---
# Git & Semantic Release: Key Takeaways for Triggering Releases

Summary of using Git commit messages to trigger automated releases with `semantic-release`.

## 1. Conventional Commits are Required

`@semantic-release/commit-analyzer` uses [Conventional Commits](https://www.conventionalcommits.org/) by default.

*   `fix:` -> `patch` release (e.g., `v1.0.1`)
    ```bash
    git commit -m "fix: Correct XML output"
    ```
*   `feat:` -> `minor` release (e.g., `v1.1.0`)
    ```bash
    git commit -m "feat: Add JSON output"
    ```
*   `BREAKING CHANGE:` in footer -> `major` release (e.g., `v2.0.0`)
    ```bash
    git commit -m "feat: Rework auth
    
    BREAKING CHANGE: Login requires API token"
    ```
*   Other prefixes (`chore:`, `docs:`, `refactor:`, `test:`, etc.) DO NOT trigger releases by de`fault.

## 2. Analyze Individual Commits, Not Merge Commits

By default, `semantic-release` analyzes commits *on the merged branch*, not the merge commit itself.

*   Feature branch commits must follow Conventional Commits **before** merging.
*   Merge commit messages (e.g., "Merge pull request #52") are usually ignored.

## 3. Manually Triggering a Missed Release

If merged commits lacked correct formatting:

1.  `git checkout main && git pull`
2.  `git checkout -b fix/trigger-release`
3.  `git commit --allow-empty -m "fix: Trigger release for recent changes"` (Use `fix:` or `feat:` as needed)
4.  `git push -u origin fix/trigger-release`
5.  Create & Merge PR targeting `main`. The `fix:` commit triggers the release.

## 4. Correcting Commits Before Merge

If a commit message is wrong *before* merging to `main`:

*   **Amend:** If it's the most recent commit on your branch:
    ```bash
    git commit --amend -m "fix: Corrected message"
    ```
*   **Force-push:** Update the remote branch (use `--force-with-lease` for safety). **Avoid on `main`.**
    ```bash
    git push --force-with-lease origin your-branch-name
    ```

## 5. Useful `gh` Commands

*   `gh pr create --base main --head <branch> ...`: Create PR.
*   `gh pr merge <pr> --auto --squash`: Enable auto-merge (squash).
*   `gh pr view <pr> --json state --jq '.state'`: Check PR state (OPEN, CLOSED, MERGED).

## 6. Troubleshooting: Release Not Triggered?

1.  **Check Logs:** Look for `@semantic-release/commit-analyzer` messages.
2.  **Check History:** Verify merged commits used `fix:`, `feat:`, or `BREAKING CHANGE:`.
3.  **Trigger Manually:** Use the empty commit method (#3).