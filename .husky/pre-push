#!/bin/sh
# . "$(dirname "$0")/_/husky.sh" # DEPRECATED: Remove this line

PNPM_CMD="pnpm" # Default command

# If in CI, try to find pnpm explicitly
if [ -n "$CI" ]; then
  # Try the standard PATH first
  if ! command -v pnpm &> /dev/null; then
      # If not found in PATH, try the known setup-pnpm location
      PNPM_BIN_PATH="/home/runner/setup-pnpm/node_modules/.bin/pnpm"
      if [ -x "$PNPM_BIN_PATH" ]; then
          echo "Found pnpm via fallback path: $PNPM_BIN_PATH"
          PNPM_CMD="$PNPM_BIN_PATH" # Use the full path
      else
          echo "Error: pnpm command not found in PATH or fallback location ($PNPM_BIN_PATH)."
          exit 1
      fi
  else
      echo "Found pnpm in PATH."
  fi
else
  # Check pnpm normally for local environments
  if ! command -v pnpm &> /dev/null; then
      echo "Error: pnpm command not found. Please install pnpm."
      exit 1
  fi
fi

# Prevent direct pushes to main branch (skips check in CI environments)
if [ -z "$CI" ]; then
  protected_branch="main"
  # Use git rev-parse --abbrev-ref HEAD for potentially more robust branch detection
  current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$current_branch" = "$protected_branch" ]; then
    echo "❌ You can't push directly to the $protected_branch branch!"
    echo "Please use feature branches and Pull Requests."
    exit 1
  fi

  # Check remote refs being pushed to (covers pushing specific branches)
  while read local_ref local_sha remote_ref remote_sha
  do
    # Extract branch name from ref (e.g., refs/heads/main -> main)
    remote_branch=${remote_ref#refs/heads/}
    if [ "$remote_branch" = "$protected_branch" ]; then
      echo "❌ Attempting to push to protected branch '$protected_branch'!"
      echo "Please use feature branches and Pull Requests."
      exit 1
    fi
  done
fi

echo "🔍 Running pre-push checks..."

# Ensure pnpm is available (check already performed above)
# if ! command -v pnpm &> /dev/null
# then
#     echo "pnpm could not be found, please install it."
#     exit 1
# fi

# Run the full test suite using the determined pnpm command
echo "🧪 Running tests using command: $PNPM_CMD"
# Execute the command stored in the variable
"$PNPM_CMD" test

# Check the exit code of the test command
if [ $? -ne 0 ]; then
  echo "❌ Tests failed. Please fix the tests before pushing."
  exit 1
fi

echo "✅ Pre-push checks passed."
exit 0 